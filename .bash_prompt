#!/bin/bash

# Resets terminal colors
NORMAL="\[\e[0m\]"
BOLD="\[\e[1m\]"
DIM="\[\e[2m\]"

# PS symbols
PS_HOME_SYMBOL=''
PS_USER_SYMBOL=''
PS_PWD_SYMBOL=''
PS_LOCKED_SYMBOL=''
PS_FOLDER_SYMBOL=''
PS_SEPARATOR_SYMBOL=''
PS_SHELL_OK_SYMBOL=''
PS_SHELL_ERROR_SYMBOL=''

# Some other NF symbols
#     

# GIT symbols
GIT_BADGE_SYMBOL=''
GIT_BRANCH_SYMBOL=''
GIT_PUSH_SYMBOL='↑'
GIT_PULL_SYMBOL='↓'

__powerline() {
    __FG_COLOR=""
    __BG_COLOR=""

    __colors() {
        printf "\[\e[38;5;$1m\]\[\e[48;5;$2m\]"
    }

    __separator() {
        [[ -n ${PS1} ]] || return
        PS1+="$(__colors $1 $2)${PS_SEPARATOR_SYMBOL}"
    }

    __segment() {
        __separator ${__BG_COLOR} $2

        __FG_COLOR=$1
        __BG_COLOR=$2

        PS1+="$(__colors ${__FG_COLOR} ${__BG_COLOR})"
    }

    __user_info() {
        __segment $1 $2
        [[ -w "${PWD}" ]] && PS1+=" ${PS_USER_SYMBOL}" || PS1+=" $(__colors 196 $2)${PS_LOCKED_SYMBOL}$(__colors $1 $2)"
        PS1+=" \u "
    }

    __host_info() {
        __segment $1 $2
        PS1+=" \h "
    }

    __cwd_info() {
        local __PATH
        __segment $1 $2
        __PATH=${PWD//${HOME}/}
        __PATH=(${__PATH//\// })
        [[ "${PWD}" == *"${HOME}"* ]] && PS1+=" ${PS_HOME_SYMBOL}  " || PS1+=" ${PS_FOLDER_SYMBOL}  "
        for i in ${!__PATH[@]}; do
            [[ $i -gt 0 ]] && PS1+="$(__colors 250 $2)${PS_PWD_SYMBOL}$(__colors $1 $2) "
            PS1+="${__PATH[$i]} "
        done
    }

    __git_info() {
        [ -x "$(which git)" ] || return    # git not found
	      [ -d .git ] || return              # no .git directory

        # get remote upstream name
        local remote="$(git remote)"
        [ -n "$remote" ] || return  # no upstream defined

        # get current branch name or short SHA1 hash for detached head
        local branch="$(git symbolic-ref --short HEAD 2>/dev/null || git describe --tags --always 2>/dev/null)"
        [ -n "$branch" ] || return  # git branch not found

        # how many commits local branch is ahead/behind of remote?
        local aheadN="$(git rev-list ${remote}/${branch}..${branch} --count)"
        local behindN="$(git rev-list ${branch}..${remote}/${branch} --count)"

        local marks
        [[ -n "$aheadN" ]] && [[ $aheadN -gt 0 ]] && marks+=" $GIT_PUSH_SYMBOL$aheadN"
        [[ -n "$behindN" ]] && [[ $behindN -gt 0 ]] && marks+=" $GIT_PULL_SYMBOL$behindN"

        # print the git branch segment without a trailing newline
        # branch is modified?
        local __GIT_FG_COLOR=235
        local __GIT_BG_COLOR=041

        if [ -n "$(git status --porcelain)" ]; then
            __GIT_FG_COLOR=000
            __GIT_BG_COLOR=226
        fi

        __segment ${__GIT_FG_COLOR} ${__GIT_BG_COLOR}
        PS1+=" ${GIT_BADGE_SYMBOL} ${GIT_BRANCH_SYMBOL} ${branch}${marks} "
    }

    __end() {
        if [[ "$1" -eq 0 ]]; then
            __nop
            #__segment 252 245
            #PS1+=" ${PS_SHELL_OK_SYMBOL} "
        else
            __segment 252 196
            PS1+=" ${PS_SHELL_ERROR_SYMBOL} ${__EXIT_CODE} "
        fi

        PS1+="${NORMAL}"
        __separator ${__BG_COLOR}
        PS1+="${NORMAL} "
    }

    __nop() {
        return
    }

    ps1() {
        local __EXIT_CODE="$?"

        PS1=""

        # user/host info
        __user_info 252 026

        # working directory
        __cwd_info 015 242

        # GIT info
        __git_info

        # finish prompt
        __end ${__EXIT_CODE}
    }

    PROMPT_COMMAND=ps1
}

__powerline
unset __powerline
